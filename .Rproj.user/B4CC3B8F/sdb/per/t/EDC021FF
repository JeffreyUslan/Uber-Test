{
    "contents" : "\n##Loading Packages\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(randomForest)\nlibrary(caret)\nlibrary(readr)\nlibrary(lubridate)\n\n##Importing Data\ndata=tbl_df(read_csv(\"Holland America Revenue Science Interview REtention Dataset.csv\"))\n##Managing data types\n#factors\ndata$BKNG_ID=as.factor(data$BKNG_ID)\ndata$HOME_STATE=as.factor(data$HOME_STATE)\ndata$NATIONALITY=as.factor(data$NATIONALITY)\ndata$HOME_COUNTRY=as.factor(data$HOME_COUNTRY)\ndata$GROUP_TYPE=as.factor(data$GROUP_TYPE)\ndata$BKNG_STATUS=as.factor(data$BKNG_STATUS)\ndata$CURRENCY_CODE=as.factor(data$CURRENCY_CODE)\ndata$AIR_FLAG=as.factor(data$AIR_FLAG)\ndata$BKNG_SOURCE=as.factor(data$BKNG_SOURCE)\ndata$BKNG_TYPE=as.factor(data$BKNG_TYPE)\ndata$GENDER=as.factor(data$GENDER)\ndata$DINING_TIME_CODE=as.factor(data$DINING_TIME_CODE)\ndata$DINING_TIME_CONF_FLAG=as.factor(data$DINING_TIME_CONF_FLAG)\ndata$META=as.factor(data$META)\n\n#dates\ndata$BKNG_OPEN_DATE=as.Date(data$BKNG_OPEN_DATE,\"%m/%d/%Y\")\ndata$BKNG_CANCEL_DATE=as.Date(data$BKNG_CANCEL_DATE,\"%m/%d/%Y\")\ndata$INSURANCE_PYMT_DATE=as.Date(data$INSURANCE_PYMT_DATE,\"%m/%d/%Y\")\ndata$SAIL_DATE=as.Date(data$SAIL_DATE,\"%m/%d/%Y\")\n\n\n\n\n##Explorations\n\n#indeces for data types\nnumeric_data_inds=which(sapply(data,is.numeric))\ncat_data_inds=which(sapply(data,is.factor))\n\n#basic summaries\nsummary(data[,numeric_data_inds])\nsummary(data[,cat_data_inds])\n\n#identify and remove near zero variables\nnzv=nzv(data[,c(numeric_data_inds,cat_data_inds)],saveMetrics=TRUE)\ndata=data[,-which(names(data) %in% rownames(nzv)[which(nzv$nzv)])]\n#identify and remove variables with high missing values\nmissing_inds=apply(data,2,function(x){sum(is.na(x))/length(x)})\ndata=data[,-which(missing_inds>.2)]\n\ndata$BKNG_ID=NULL\ndata$BKNG_CANCEL_DATE=NULL\ndata$BKNG_OPEN_DATE=NULL\ndata$SAIL_DATE=NULL\ndata=data %>% filter(BKNG_STATUS!=\"G\")\ndata$BKNG_STATUS=as.factor(as.character(data$BKNG_STATUS))\n\n#create categorical of insurance payment\ndata=data %>% mutate(insurance= INSURANCE_PYMT_DATE>min(data$INSURANCE_PYMT_DATE))\ndata$INSURANCE_PYMT_DATE=NULL\n\n#Tabular break down of numeric variables by booking status\ndata %>% group_by(BKNG_STATUS)  %>%\n  summarise(AGE=mean(AGE),NBR_CRUISES=mean(NBR_CRUISES),NET_TKT_REV=mean(NET_TKT_REV))\n\n# some cross tabulations\ndata %>% group_by(BKNG_STATUS,DINING_TIME_CODE) %>% summarise(count=n())\ndata %>% group_by(BKNG_STATUS,BKNG_TYPE) %>% summarise(count=n())\ndata %>% group_by(BKNG_STATUS,META) %>% summarise(count=n())\ndata %>% group_by(BKNG_STATUS,insurance) %>% summarise(count=n())\n\n\n#Do people with children cancel? Yes, of course.\nggplot(data)+theme_bw()+geom_density(aes(x=AGE,color=BKNG_STATUS))\nggplot(data)+theme_bw()+geom_density(aes(x=NET_TKT_REV,color=BKNG_STATUS))\n\n\n\n\n\n\n## Create a model that predicts whether a person will cancel a booking\n#creating a training and test set\ndata=na.omit(data)\ninTrain = createDataPartition(y=data$BKNG_STATUS, p = .6)[[1]]\ntraining = data[ inTrain,]\ntesting = data[-inTrain,]\n\n#building random forest model\nmodFit <- randomForest(BKNG_STATUS ~ .,data=training)\n\n#testing on training set as a sanity check\ntrain_pred=predict(modFit,newdata= training)\nconfusionMatrix(training$BKNG_STATUS,train_pred )\n\n#testing on test set\ntest_pred=predict(modFit,newdata= testing)\nconfusionMatrix(testing$BKNG_STATUS,test_pred)\n\n#Relative variable importance according to the Gini Information Index\nvarImpPlot(modFit,main=\"Variable Importance\")\n\n\n## What kind of people book suites (meta in ('S','D')) (Active bookings only)\n#filtering for active bookings\nsuite_people=data %>% filter(BKNG_STATUS==\"B\")\nsuite_people$Suite=\"Coach\"\nsuite_people$Suite[which(suite_people$META %in% c('S','D'))]=\"Suite\"\nsuite_people$Suite=as.factor(suite_people$Suite)\nsuite_people$META=NULL\n\n#Use random forests as a shortcut to identify variable importance\nmodFit <- randomForest(Suite ~ .,data=suite_people)\nvarImpPlot(modFit,main=\"Variable Importance\")\n\n\n#The top three variables are numeric with \nsuite_people %>% group_by(Suite) %>% \n  summarise(AGE=mean(AGE),NBR_CRUISES=mean(NBR_CRUISES),NET_TKT_REV=mean(NET_TKT_REV))\n\n#people who are willing to pay more\nggplot(suite_people)+theme_bw()+geom_density(aes(x=NET_TKT_REV,color=Suite))\n\n#slight age bias\nggplot(suite_people)+theme_bw()+geom_density(aes(x=AGE,color=Suite))\n\n#If you're going to cruise often- do it in style\nggplot(suite_people %>% filter(NBR_CRUISES>0,NBR_CRUISES<50))+theme_bw()+geom_density(aes(x=NBR_CRUISES,color=Suite))\n\n#Agencies book people on suites more ferquently\nsuite_people %>% group_by(Suite,BKNG_SOURCE) %>%  summarise(count=n())\n\n\n\n\n\n\n\n",
    "created" : 1446515422485.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "122760736",
    "id" : "EDC021FF",
    "lastKnownWriteTime" : 1446521112,
    "path" : "~/Uber Test/Holland_Line_Test.R",
    "project_path" : "Holland_Line_Test.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}